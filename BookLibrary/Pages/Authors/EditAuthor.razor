@using BookLibrary.Data.Models;
@using BookLibrary.Db.Interfaces;

@page "/Authors/Edit/{Id:guid}"

@inject IAuthorRepository repository
@inject NavigationManager nagivation
@inject IMapper mapper 

<EntityForm Title="Edit Author">
    @if (!initialized)
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
    else
    {
        if (author == null)
        {
            <EntityNotFound EntityType="@typeof(Author)" Id="@Id" />
        }
        else
        {
            <EditForm Model="authorModel" OnValidSubmit="Success">
                <DataAnnotationsValidator />
                <p>
                    <MatTextField Label="First Name" @bind-Value="authorModel.FirstName" FullWidth="true" />
                </p>
                <p>
                    <MatTextField Label="Middle Name" @bind-Value="authorModel.MiddleName" FullWidth="true" />
                </p>
                <p>
                    <MatTextField Label="Last Name" @bind-Value="authorModel.LastName" FullWidth="true" />
                </p>
                <MatButton Type="submit" Raised="true">Save Changes</MatButton>
            </EditForm>
        }
    }
</EntityForm>
@code {
    [Parameter]
    public Guid Id { get; set; }

    AuthorModel authorModel = new AuthorModel();
    Author author = null;
    bool initialized = false;

    protected override async Task OnInitializedAsync()
    {
        author = await repository.GetByIdAsync(Id);
        if (author != null)
        {
            authorModel = mapper.Map<AuthorModel>(author);
        }
        initialized = true;
    }

    private async Task Success(EditContext editContext)
    {
        if (editContext.Validate() && author != null)
        {
            author.FirstName = authorModel.FirstName;
            author.MiddleName = authorModel.MiddleName;
            author.LastName = authorModel.LastName;
            await repository.UpdateAsync(author);

            nagivation.NavigateTo("/Authors/List");
        }
    }
}
