@page "/groups/list"

@attribute [Authorize(Roles = "Admin")]

@inject IBookGroupRepository repository
@inject IMapper mapper
@inject NavigationManager uri
@inject MessageService message
@inject IStringLocalizer<GroupsLocalization> loc

<h1>@loc["List"]</h1>
<p>
    <Button Type="@ButtonType.Primary" 
            Icon="plus" 
            OnClick="OnCreate">
    @loc["Add"]
    </Button>
</p>

@{
    RenderFragment<TreeNode<BookGroupModel>> template = (context) =>
    @<div class="tree-template">
        <div>@context.DataItem.Title</div>
        <div class="tree-button-group">
            <Button Type="@ButtonType.Link" 
                    Icon="edit" 
                    Shape="circle" 
                    Size="small" 
                    OnClick="(_) => EditGroup(context.DataItem)">
            </Button>
            <Popconfirm Title="@loc["ConfirmDelete"]"
                        OnConfirm="async (_) => await DeleteGroup(context.DataItem)"
                        OkText="@loc["Yes"]"
                        CancelText="@loc["No"]">
                <Button Type="@ButtonType.Link" 
                        Icon="delete" 
                        Shape="circle" 
                        Size="small">
                </Button>
            </Popconfirm>
        </div>
    </div>;
}
@if (groups.Count == 0)
{
    <Empty />
}
else
{
    <Tree TItem="BookGroupModel"
          MatchedClass="site-tree-search-value"
          DataSource="groups"
          TitleExpression="x => x.DataItem.Title"
          ChildrenExpression="x => x.DataItem.Childs"
          KeyExpression="x => x.DataItem.Uid"
          Multiple="false"
          TitleTemplate="template"
          OnNodeLoadDelayAsync="OnNodeLoadAsync"
          IsLeafExpression="x => x.TreeLevel > 2">
    </Tree>
}
@code {
    List<BookGroupModel> groups = new List<BookGroupModel>();

    protected override async Task OnInitializedAsync()
    {
        var bookGroups = await repository.ListAsync(new RootBookGroupSpecification());
        groups.AddRange(bookGroups.Select(i => mapper.Map<BookGroup, BookGroupModel>(i)).ToList());
    }

    public async Task OnNodeLoadAsync(TreeEventArgs<BookGroupModel> args)
    {
        var dataItem = ((BookGroupModel)args.Node.DataItem);
        var childs = await repository.ListAsync(new ChildsBookGroupSpecification(dataItem.Id));
        dataItem.Childs.Clear();
        dataItem.Childs.AddRange(childs.Select(i => mapper.Map<BookGroup, BookGroupModel>(i)));
    }

    private void OnCreate()
    {
        uri.NavigateTo("/groups/add");
    }

    private void EditGroup(BookGroupModel groupModel)
    {
        uri.NavigateTo($"/groups/edit/{groupModel.Id}");
    }

    private async Task DeleteGroup(BookGroupModel groupModel)
    {
        var entity = await repository.FirstOrDefaultAsync(new BookGroupWithoutBooksAndChildsSpecification(groupModel.Id));
        if (entity == null)
        {
            await message.Warning(loc["CantDeleteGroup"].Value);
        }
        else
        {
            await repository.DeleteAsync(entity);
            if (groupModel.Parent != null)
            {
                groupModel.Parent.Childs.Remove(groupModel);
            }
            else
            {
                groups.Remove(groupModel);
            }
        }
    }
}