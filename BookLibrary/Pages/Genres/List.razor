@page "/genres/list"
@attribute [Authorize(Roles = "Admin")]

@inject IGenreRepository repository
@inject IMapper mapper
@inject ModalService modalService
@inject IStringLocalizer<GenresLocalization> loc
@inject MessageService message

<h1>@loc["List"]</h1>
<p>
    <Button Type="@ButtonType.Primary" Icon="plus" OnClick="OnCreate">@loc["Add"]</Button>
</p>
<Modal Title="@(_modalTitle)"
        Visible="@_visible"
        OnOk="@HandleOk"
        OnCancel="@HandleCancel"
        ConfirmLoading="@_confirmLoading"
        DestroyOnClose="true">
    <Form Model="@Model">
        <FormItem>
            <Input @bind-Value="@context.Title" />
        </FormItem>
    </Form>
</Modal>

<p>
    @if (_genres.Count == 0)
    {
        <Empty />
    }
    else
    {
        <AntList Bordered="true" 
                 DataSource="@_genres">
            <ChildContent Context="item">
                <ListItem Actions="new RenderFragment[] { edit(item), delete(item) }">
                    <ListItemMeta>
                        <TitleTemplate>
                            <Button Type="@ButtonType.Link">@item.Title</Button>
                        </TitleTemplate>
                    </ListItemMeta>
                </ListItem>
            </ChildContent>
        </AntList>
    }
</p>

@code {
    RenderFragment icon =@<Icon Type="exclamation-circle" Theme="outline"></Icon>;
    Func<GenreModel, RenderFragment> edit;
    Func<GenreModel, RenderFragment> delete;

    private bool _visible = false;
    bool _confirmLoading = false;
    private string _modalTitle = string.Empty;
    private List<GenreModel> _genres = new List<GenreModel>();

    GenreModel Model { get; set; } = new GenreModel();

    protected override async Task OnInitializedAsync()
    {
        var genres = await repository.ListAllAsync();
        _genres.AddRange(genres.Select(i => mapper.Map<Genre, GenreModel>(i)));

        edit = m => @<Button Type="@ButtonType.Link" OnClick="() => OnEdit(m)">@loc["Edit"]</Button>;
        delete = m => @<Button Type="@ButtonType.Link" OnClick="() => OnDelete(m)">@loc["Delete"]</Button>;
    }


    private void OnCreate()
    {
        Model = new GenreModel();
        _modalTitle = loc["Create"];
        _visible = true;
    }

    private void OnEdit(GenreModel genreModel)
    {
        Model = genreModel;
        _modalTitle = loc["Edit"];
        _visible = true;
    }

    private void OnDelete(GenreModel genreModel)
    {
        modalService.Confirm(new ConfirmOptions()
        {
            Title = loc["ConfirmDelete"],
            Icon = icon,
            OnOk = (_) => ConfirmDelete(genreModel),
            OkType = "danger",
        });
    }

    private async Task ConfirmDelete(GenreModel genreModel)
    {
        var entity = await repository.FirstOrDefaultAsync(new GenreWithoutBooksSpecification(genreModel.Id));
        if (entity != null)
        {
            await repository.DeleteAsync(entity);
            _genres.Remove(genreModel);
            StateHasChanged();
        }
        else
        {
            await message.Warning(loc["CantDeleteGenre"].Value);
        }
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        _confirmLoading = true;
        if (Model.Id != Guid.Empty)
        {
            var entity = await repository.GetByIdAsync(Model.Id);
            if (entity != null)
            {
                entity.Title = Model.Title;
                await repository.UpdateAsync(entity);
            }
        }
        else
        {
            var entity = await repository.AddAsync(new Genre
            {
                Title = Model.Title
            });

            _genres.Add(mapper.Map<Genre, GenreModel>(entity));
        }
        StateHasChanged();

        _visible = false;
        _confirmLoading = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        _visible = false;
    }
}