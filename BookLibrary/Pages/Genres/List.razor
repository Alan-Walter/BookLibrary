@page "/genres/list"

@inject IGenreRepository repository
@inject IMapper mapper 
@inject ModalService modalService 

<h1>List of genres</h1>
<AuthorizeView Roles="Admin">
    <Authorized Context="auth">
        <p>
            <Button Type="@ButtonType.Primary" Icon="plus" OnClick="OnCreate">Add</Button>
        </p>
        <Modal Title="@(_modalTitle)"
               Visible="@_visible"
               OnOk="@HandleOk"
               OnCancel="@HandleCancel"
               ConfirmLoading="@_confirmLoading" 
               DestroyOnClose="true">
            <Form Model="@Model">
                <FormItem>
                    <Input @bind-Value="@context.Title" />
                </FormItem>
            </Form>
        </Modal>
    </Authorized>
</AuthorizeView>

<p>
    @if (_genres.Count == 0)
    {
    <Empty/>
    }
    else
    {
    <AntList Bordered="true" DataSource="@_genres">
        <ChildContent Context="item">
            <ListItem Actions="hasPermission ? new RenderFragment[] { edit(item), delete(item) } : new RenderFragment[0]">
                <ListItemMeta>
                    <TitleTemplate>
                        <Button Type="@ButtonType.Link">@item.Title</Button>
                    </TitleTemplate>
                </ListItemMeta>
            </ListItem>
        </ChildContent>
    </AntList>
    }
</p>

@code {
    RenderFragment icon = @<Icon Type="exclamation-circle" Theme="outline"></Icon>;
    Func<GenreModel, RenderFragment> edit;
    Func<GenreModel, RenderFragment> delete;

    private bool _visible = false;
    bool _confirmLoading = false;
    private string _modalTitle = "Create";
    private List<GenreModel> _genres = new List<GenreModel>();
    private bool hasPermission = false;

    GenreModel Model { get; set; } = new GenreModel();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var genres = await repository.ListAllAsync();
        _genres.AddRange(genres.Select(i => mapper.Map<Genre, GenreModel>(i)));

        var user = (await authenticationStateTask).User;
        hasPermission = user.Identity.IsAuthenticated && user.IsInRole("Admin");
        if (hasPermission)
        {
            edit = m => @<Button Type="@ButtonType.Link" OnClick="() => OnEdit(m)">edit</Button>;
            delete = m => @<Button Type="@ButtonType.Link" OnClick="() => OnDelete(m)">delete</Button>;
        }
    }


    private void OnCreate()
    {
        Model = new GenreModel();
        _modalTitle = "Create";
        _visible = true;
    }

    private void OnEdit(GenreModel genreModel)
    {
        Model = genreModel;
        _modalTitle = "Edit";
        _visible = true;
    }

    private void OnDelete(GenreModel genreModel)
    {
        modalService.Confirm(new ConfirmOptions()
        {
            Title = "Are you sure delete this genre?",
            Icon = icon,
            OnOk = (_) => ConfirmDelete(genreModel),
            OkType = "danger",
        });
    }

    private async Task ConfirmDelete(GenreModel genreModel)
    {
        var entity = await repository.GetByIdAsync(genreModel.Id);
        if (entity != null)
        {
            await repository.DeleteAsync(entity);
        }
        _genres.Remove(genreModel);
        StateHasChanged();
    }

    private async Task HandleOk(MouseEventArgs e)
    {
        _confirmLoading = true;
        if (Model.Id != Guid.Empty)
        {
            var entity = await repository.GetByIdAsync(Model.Id);
            if (entity != null)
            {
                entity.Title = Model.Title;
                await repository.UpdateAsync(entity);
            }
        }
        else
        {
            var entity = await repository.AddAsync(new Genre
            {
                Title = Model.Title
            });

            _genres.Add(mapper.Map<Genre, GenreModel>(entity));
        }
        StateHasChanged();

        _visible = false;
        _confirmLoading = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine("Clicked cancel button");
        _visible = false;
    }
}